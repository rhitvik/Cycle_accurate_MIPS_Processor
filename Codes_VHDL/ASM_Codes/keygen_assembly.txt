Register Files:
R[0] is 0
R[1] is A
R[2] is B
R[3] stores S[i]
R[4] stores L[j]
R[5] left shift counter
R[6] Address to skey
R[7] Address to l_array 
Data Memory:
Mem[0] to Mem[26] store S[0] to S[26]
Mem[27] to Mem[30] store L[0] to L[3]
addi $0, $1 0
addi $0, $2 0
// 00000100000000010000000000000000
x"04",x"01",x"00",x"00",
// 00000100000000100000000000000000
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
addi $0, $10, 26  //R[10] = R[0] + 26                        //t
addi $0, $11, 4   //R[11] = R[0] + 4			     //c
addi $0, $12, 78  //R[12] = R[0] +78                         //DO 78 TIMES

addi $0, $14, 31  // R[14] = R[0] + 31			     // Bit counter
lb $6, $3, 0      //R[3] = M[0 + R[6]]                       // Load S[i]
addi $0, $13, 3   // R[13] = R[0] + 3			     // Shift counter

---------------------------------------------------------------------------------

add $0, $0, $0
           
add $3, $1, $9    //R[9] = R[3] + R[1]                       
add $9, $2, $9    //R[9] = R[9] + R[2]			    //S[i] = S[i] + A + B
shr $9, $15, 31	  // shift right to get MSB
add $9, $9, $9    // Add same twice to get 0 as LSB
add $9, $15, $9   // Rotated value
subi $13, $13 , 1	// decrement
bne $0, $13, -20		// go to pc = pc + 1 -20
add $0, $9, $1    //R[1] = R[0] + R[9]			    //A = S[i] = (S[i] + A + B) <<< 3 
sb $6, $1, 0      //M[0 + R[6]] = R[1]			    // Store A to S[i]
------------------------------------------------------------------------------------

add $0, $0, $0

add $1, $2, $8    //R[8] = R[1] + R[2]			    //A+B
andi $8, $8, 31   //R[8] = R[8] AND 0(*27) 11111           // last 5 bits of A+B
lb $7, $4, 26     //R[4] = M[26 + R[7]]                    //load L[j] 

------------------------------------------------------------------------------------

add $0, $0, $0

add $4, $1, $9    //R[9] = R[1] + R[4]						// A + L[j]
add $9, $2, $9    //R[9] = R[9] + R[2]                     // A + B + L[j]
beq $0, $8, 20     //IF (R[0] == R[8]) THEN PC = PC + 1 + 5   //loop to left rotate
shr $9, $15, 31	  // shift right to get MSB
add $9, $9, $9    // Add same twice to get 0 as LSB
add $9, $15, $9   // Rotated value
subi $8, $8 , 1	// decrement
bne $0, $8, -20	
add $0, $9, $2    //R[2] = R[0] + R[9]						// R[2] = B
sw $7, $2, 26     //M[26 + R[7]] = R[2]						//store B to L[j]

------------------------------------------------------------------------------------

add $0, $0, $0

addi $6, $6, 1    //R[6] = R[6] + 1                         //shift left by 1 bit //i = i+1
addi $7, $7, 1    //R[7] = R[7] + 1                         //j = j+1
bne $6, $10, 4    //IF (R[6] != R[10]) THEN PC = PC + 1 + 1	//i = (i + 1) mod (26)
sub $6, $6, $6    //R[6] = R[6] - R[6]
bne $7, $11, 4    //IF (R[7] != R[11]) THEN PC = PC + 1 + 1  //j = (j + 1) mod (4);
sub $7, $7, $7    //R[7] = R[7] - R[7]
addi $5, $5, 1    //R[5] = R[5] + 1
bne $5, $12, -31  //IF (R[5] != R[12]) THEN PC = PC + 1 - 35  // check 78 loop

