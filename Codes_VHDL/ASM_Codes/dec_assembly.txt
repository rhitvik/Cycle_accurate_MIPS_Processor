Register Files:
R[0] is 0
R[1] is A
R[2] is B
R[3] stores S[2*i] or S[2*i+1]
R[4] is right shift counter
R[12] is the loop counter: i

Data Memory:
Mem[0]to Mem[26] store S[0] to S[26]
======================================================================
addi $0, $12, 12    //R[12]=R[0] + 12                    //R[12]=12
add  $12, $13,$13   //R[13]=R[12] + R[12]                //R[13]=2*i	
addi $13, $14, 1    //R[14]=R[13] + 1                    //R[14]=2*i+1
lw $14, $3, 0       //R[3]=Mem[R14]                      //R[3]=S[2*i+1]
----------------------------------------------------------------------------

WAIT
sub $2, $3, $2      //R[2]=R[2]-R[3]                     //B<=B-S[2*i+1]
andi $1, $4, 31     //R[4]=R[1] and 0(*27)11111          //R[4]=last 5 bits of A   
 
-----------((B-S[2*i+1]) >>> A)------------------------------------------------
beq $0, $4, 3       //If (R[0]==R[4]) then PC=PC+1+3     
shr $2, $2, 1       //R[2]=R[2]>>1
subi $4, $4, 1      //R[4]=R[4] - 1                      //i=i-1
bne $0, $4, -3      //If (R[0]!==R[4]) then PC=PC+1-3    //B<=B>>>A

or $1, $2, $5       //R[5]=R[1] or R[2]
and $1, $2, $6      //R[6]=R[1] and R[2]
sub $5, $6, $2      //R[2]=R[5]-R[6]                     //B=B XOR A

sub $3, $3, $3      //R[3]=R[3]-R[3]                     //R[3]=0
lw $13, $3, 0       //R[3]=Mem[R13]                      //R[3]=S[2*i]
------------------------------------------------------------------------------------

WAIT
sub $1, $3, $1      //R[1]=R[1]-R[3]                     //A<=A-S[2*i]
andi $2, $4, 31     //R[4]=R[2] and 0(*27)11111          //R[4]=last 5 bits of B

--------------------((A-S[2*i]) >>> B)---------------------------------------------

beq $0, $4, 3       //If (R[0]==R[4]) then PC=PC+1+3
shr $1, $1, 1       //R[1]=R[1]>>1
subi $4, $4, 1      //R[4]=R[4] - 1                      //i=i-1
bne $0, $4, -3      //If (R[0]!==R[4]) then PC=PC+1-3    //A<=A>>>B

or $1, $2, $5       //R[5]=R[1] or R[2]
and $1, $2, $6      //R[6]=R[1] and R[2]
sub $5, $6, $1      //R[1]=R[5]-R[6]                     //A=A XOR B

subi $12, $12, 1    //R[12]=R[12] - 1
bne $12, $0, -27    //If (R[12]!==R[0]) then PC=PC+1-27

sub $3, $3, $3      //R[3]=R[3]-R[3]                     //R[3]=0
lw $0, $3, 1        //R[3]=Mem[1]                        //R[3]<=S[1]
hal                 //HALT
sub $2, $3, $2      //R[2]=R[2]-R[3]                     //B<=B-S[1]

sub $3, $3, $3      //R[3]=R[3]-R[3]                     //R[3]=0
lw $0, $3, 0        //R[3]=Mem[0]                        //R[3]<=S[0]
------------------------------------------------------------------------------------

WAIT
sub $1, $3, $1      //R[1]=R[1]-R[3]                     //A<=A-S[0]

END